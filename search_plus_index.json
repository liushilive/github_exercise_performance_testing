{"index.html": {"url": "index.html", "title": "介绍", "keywords": "", "body": "性能测试相关我只是搬运工，如果文中有冒犯到您的地方，请告知我删除内容，或添加来源。"}, "md/performance/index.html": {"url": "md/performance/index.html", "title": "性能理论", "keywords": "", "body": "性能理论性能测试是一门富有挑战性的、有深度的、综合性的学科。很多性能测试初学者总觉得性能测试就是写个脚本，弄几台机器压一压，出个报告就行了。通常关注并发多少响应时间多少能跑通吗这些问题。认为并发越大越好，响应时间越快越好，那性能一定就越好。性能测试不仅仅是录制脚本或者编写程序，基本的性能理论、性能执行的原则还是要了解的。同样的脚本，不同的人员执行，不同的针对点，测试结果会大相径庭。实际上我们需要对系统进行一系列复杂的需求分析，以及一系列性能测试计划和设计的工作才能开始性能测试执行。经过N次回归，找到瓶颈的具体原因，并优化。掌握性能理论基础才能驾驭那些性能测试工具等，没有掌握性能理论基础直接操作好比开车找不到目标，盲目原地打转或离目标越来越远。如何从菜鸟迅速成长为高手？接下来我们将拨开性能测试的层层迷雾，探寻真相之源。"}, "md/performance/性能测试概论.html": {"url": "md/performance/性能测试概论.html", "title": "性能测试概论", "keywords": "", "body": "性能测试概论随着互联网技术的迅速发展、软件系统的日益复杂，性能已经成为软件质量重要的衡量标准之一。中国银联业务也曾经因性能问题中断6小时，数百万笔跨行交易无法进行，损失超过10亿元。由性能所导致的问题影响越来越广泛，因此企业对于软件产品的性能要求越来越高，也越来越关注。一个好的建筑师首先需要清楚了解各建筑材料的特性，同样，一个好的性能测试工程师也需要对性能的基础知识有全面的了解。下面就让我们一起来学习性能测试的基础知识。1.什么是性能测试性能（Performance）计算机系统或子系统实现其功能的能力。对计算机系统或子系统执行其功能的能力的度量。例如，响应时间、吞吐能力、事务处理数。性能测试性能测试是通过自动化的测试工具模拟多种正常、峰值及异常负载条件来对系统的各项性能指标进行测试。它的覆盖面非常广泛，对于一个软件系统而言包括了执行效率、资源占用、稳定性、安全性、兼容性、可扩展性、可靠性等。性能测试用来保证产品发布后，系统的性能满足用户的需求。性能测试在软件质量保证过程中起到重要的作用。通俗地讲，通过模拟生产运行的业务压力和使用场景组合，测试系统的性能是否满足生产性能要求。即在特定的运行条件下验证系统的能力状况。图是当前典型的系统性能涉及的方面，需要多个工种（有架构师、开发、系统管理员、DBA、测试等）一起协调才能完成工作，每个环节都可能是瓶颈，造成阻塞。相对于目前国内的IT软件部门环境，因为需要协调多部门，所以性能测试工作人员必须是一个复合型人才，对于各工作的知识有所了解也要求有一定的项目协调能力，来引导大家同心协力地完成此项复合任务，靠单人是不太可能完成如此具有挑战的工作。技术部门一般有以下几种常见的角色：开发、测试、架构师、运维人员（系统管理员、DBA）等。下面我们看看不同角度对于系统的要求。用户角度用户关注的性能，主要为主观用户体验。一方面是用户查询、提交等业务操作的响应速度，从用户发起请求到服务器返回结果的时间。另一方面是页面展示、页面解析、渲染的速度，包含了用户计算机和网站服务器的通信时间、网站服务器的处理时间、用户计算机浏览器构造请求解析响应数据的时间。黑盒测试的角度黑盒测试操作应用界面-&gt;数据请求经过网络发送-&gt;服务器前端接收处理-&gt;在DBserver获取相关数据-&gt;前端处理后返回数据-&gt;应用界面收到数据响应。黑盒测试只关心应用程序的单步响应时间，性能好坏就看应用时间多少，也就是数据流经过服务器/服务器集群经过网络传输后往返的时间总和。开发人员角度从架构层面看，关注应用层、服务层、数据层的性能。从系统功能层面看，关注各个模块、模块之间、接口之间的性能。在应用服务器端：服务器本地缓存、分布式缓存、异步消息队列、集群（应用服务器集群、缓存服务器集群、数据服务器缓存）。在数据库服务器端：索引、缓存、SQL优化、NoSQL。在代码层面：多线程、改善内存管理。具体体现：包括响应延迟、系统吞吐量、并发处理能力、资源消耗、系统稳定性。作为一个开发人员，只关注功能的代码实现，很少有精力去关注数据库的设计，框架的设计是否合理，系统里内存的使用方式是否合理、系统里线程使用方式是否合理、系统资源会不会有可能存在不合理竞争。他们通常认为这些是架构师去考虑的问题，但是在我国普遍的中小软件公司，很少有去考虑这些事情。系统管理员角度硬件资源利用JVMDB换哪些硬件能提高系统性能系统能否支持7*24的服务扩展性，兼容性，最大容量，可能的瓶颈作为运维人员通常关注这套系统所有服务器是否正常运行，一般关注这些服务器（数据库、中间件等服务器）的硬件资源利用率情况，如内存是否有可用空间，CPU是否超过70%,网络是否通畅、I/0是否存在瓶颈。这些服务器和配置是否能支撑几个月甚至几年稳定无问题地运行这套系统。除此之外还考虑，随着公司业务的增大，吞吐量需求加大，是否增加服务器就可以等比例地提高系统的综合吞吐量。性能测试的角度服务器硬件性能根据需求和历史数据制定性能目标建立性能通过模型对开发代码框架和硬件框架进行性能分析针对开发发布版本的基准测试执行软件性能验收及稳定性测试生产环境的配置和优化制定性能测试的测试用例制定性能测试的场景设计协调各部门配合特定的性能分析性能测试是一项综合性的工作，致力于暴露性能问题，评估性能趋势。性能测试工作实质是利用工具去模拟大量用户来验证系统能够承受的负载情况，找出潜在的性能问题，分析并解决；找出系统性能变化趋势，为后续的扩展提供参考。2.性能测试的必要性随着互联网的发展，单机软件的逐渐减少，系统从单机步入“云”时代，软件系统功能和规模也越来越庞大，用户规模也越来越大，用户对产品的要求也越来越高，以前可能看重功能方面，现在正在逐步转变为性能方面。随着用户数量的增多，系统稳定性就成为企业的首要技术保障，稳定才能带来流量，才能赚钱。因为从这几年发生的事件来看，性能带来的严重问题以及损失不容忽视，而性能测试的重要性也不言而喻。案例12008年的奥运会票务系统，由于庞大的订票人数超出预期，奥运票务系统开工后不久便陷入瘫痪状态，当时对外公布的是奥运票务系统每小时能处理15万张门票的销售，以及承担每小时100万次以上的网上浏览量，但10月30日系统死机前每小时的网上浏览量达到800万，1小时售出的票也达到了20万张。由于预估工作的缺陷，导致很多人无法通过网络订到自己想要的票。案例2魔兽世界在中国的代理商由九城变更为网易，与九城服务器经常死机不无关系，但是换作网易后，服务器也经常死机。2010年10月11日，魔兽世界服务器故障时，官网论坛上的游戏玩家纷纷发贺词表示不满，从这可以看出网易公司对魔兽世界的性能预估存在不足。也正是因为对性能严重忽视间接导致了九城在失去魔兽世界之后，从一家土豪公司成了一家几乎被人遗忘的公司。案例42010年，中国最大的微博平台新浪微博死机4小时，新浪官方解释说：之所以掉线几小时，是因为用户增长超出预期，服务器备感压力。自上午10点起，用户无法登录，新浪的报错页面几次更改，最初的微博正在升级，将于11:30恢复，然后改为12:00恢复，过了一段时间，干脆改为稍后恢复，然而，估计是看不到恢复希望，提示信息又改为微博系统压力过大正在抢修，我们深表歉意。悲剧的是歉意竟然写成了谦意。12306订票"}, "md/performance/性能测试类型.html": {"url": "md/performance/性能测试类型.html", "title": "性能测试类型", "keywords": "", "body": "性能测试类型对于性能测试的分类，业界有很多标准，而对每个类型的诠释也有一些差别。从狭义来看，性能测试主要用于描述常规的性能测试，是指通过模拟生产运行的业务压力或用户使用场景来测试系统的性能是否满足生产性能的要求。从广义来看，性能测试则是压力测试、负载测试、强度测试、容量测试、大数据量测试、基准测试等和性能相关的测试的统称。性能测试的种类繁多，但是实际执行起来又很难严格区分，所以理解各种分类的特点和概念即可，没必要咬文嚼字。1.压力测试（StressTesting）压力测试是指通过逐步增加系统负载，测试系统性能的变化，并最终确定在什么负载条件下系统性能处于失效状态，通过确定一个系统的瓶颈或者不能接受的性能点，来获得系统能提供的最大服务级别的测试。压力测试可以理解为没有预期的性能指标，不断地加压，看系统什么时候崩溃，以此来确定系统的瓶颈或者不能接受的性能拐点，以获得系统的最佳并发数、最大并发数。压力测试就好比跑马拉松，看你到底能跑多久，什么时候就坚持不住了。压力测试的目的是找出因资源不足或资源争用而导致的错误。压力测试还可用于确定测试对象能够处理的最大工作量。压力测试并不是简单地为了一种破坏的快感而去破坏系统，实际上它可以让测试工程师观察系统在出现故障时的反应。系统是不是保存了它出现故障时的状态？是不是它突然间崩溃掉了？它是否只是挂在那儿什么也不做了？在重启之后，它是否有能力恢复到前一个正常运行的状态？2.负载测试（LoadTesting）负载测试是指在给定的测试环境下，通过逐步增加系统负载，直到性能指标超过预定指标或某种资源使用已经达到饱和状态，从而确定系统在各种工作负载下的性能容量和处理能力，以及持续正常运行的能力，确定系统所能够承受的最大负载量。负载测试的主要用途是发现系统性能的拐点，寻找系统能够支持的最大用户、业务等处理能力的约束，为系统调优提供数据。负载测试可以理解为确定所要测试的业务或系统的负载范围，然后对其进行测试。它的主要目的是验证业务或系统在给定的负载条件下的处理性能。此外，还要关注响应时间、每秒通过事务数和其他相关指标。负载测试的目标是确定并确保系统在超出最大预期工作量的情况下仍能正常运行。此外，负载测试还要评估性能特征，例如，响应时间、事务处理速率和其他与时间相关的方面。3.强度测试强度测试检查程序对异常的处理能力。压力测试注重的是外界不断施压，而强度测试注重的是系统的极限或者系统异常情况下的测试。强度测试是一种特别重要的测试，对系统的稳定性，以及系统未来的扩展空间均具有重要的意义。在这种异常条件下进行的测试，更容易发现系统是否稳定及性能是否容易扩展。4.容量测试容量测试是负载测试的补充，用来确定程序的最终临界点。容量测试用于测试系统能够处理的最大会话能力，确定系统可处理同时在线的最大用户数。即使系统处理会话超过了临界点，系统仍需要稳定运行。容量测试的目的是通过测试预先分析出反映软件系统应用特征的某项指标的极限值（如最大并发用户数、数据库记录数等），系统在其极限状态下没有出现任何软件故障或仍能保持主要功能正常运行。容量测试还将确定测试对象在给定时间内能够持续处理的最大负载或工作量。软件容量测试能让软件开发商或用户了解该软件系统的承载能力或提供服务的能力，如某个电子商务网站所能承受的、同时进行交易或结算的在线用户数。知道了系统的实际容量，如果不能满足设计要求，就应该寻求新的技术解决方案，以提高系统的容量。有了对软件负载的准确预测，不仅能对软件系统在实际使用中的性能状况充满信心，同时也可以帮助用户经济地规划应用系统，优化系统的部署。5.大数据量测试大数据量测试可以分为三种类型：针对某些系统存储、传输、统计、查询等业务进行大数据量的独立数据量测试。与压力性能测试、负载性能测试、疲劳性能测试相结合的综合数据量测试方案。单独的数据库或文件系统性能测试。通常来说，我们采用第二种测试方案，即把多种测试类型结合在一起，以节省测试时间。如果怀疑或者已经发现大数据量情况下存在问题，那么需要采用方案一、三进行深入测试。6.基准测试（BenchmarkTesting）基准测试是指在一定的软件、硬件及网络环境下，模拟一定数量的虚拟用户运行一种或多种业务，将测试结果作为基线数据，在系统调优或系统评测的过程中，通过运行相同的业务场景比较测试结果，确定调优的结果是否达到预期效果，或者为系统的选择提供决策数据。基准测试一般基于配置测试，通过配置测试得到数据，并将这个数据作为基准来比较每次调优后的性能是否有所改善。通过对被测系统的软硬件环境进行调整，了解不同环境对性能影响的程度，从而找到系统各项资源的最优分配原则。基准测试的主要意义：主要用于性能调优。在经过测试获得了基准测试数据后，进行环境调整（包括硬件配置、网络、操作系统、应用服务器、数据库等），再将测试结果与基准数据进行对比，判断调整是否达到最佳状态。7.并发测试并发测试可以理解为很多的用户按照预定的场景并发请求某个业务或功能时是否出现并发问题。例如，内存泄露、线程锁、资源争用等，几乎所有的性能测试都会涉及并发测试。并发测试的主要目的是找出并发引起的问题。8.稳定性测试稳定性测试顾名思义重点在于稳定二字，要想知道系统稳定的情况，就需要长时间运行，在这段时间内观察系统的出错几率、性能变化趋势等。进而大大减少系统上线后的崩溃等现象。一般都会进行所谓的7×24小时的稳定性测试。但稳定性测试也有和其他分类不一样的地方，这里需要强调以下两点。一般稳定性测试需要在系统成型后进行，并且没有严重的Bug存在。场景的设计以模拟真实用户的实际操作为佳。9.失效恢复测试失效恢复测试重在关注系统出现问题后能否根据预先制定的策略恢复，且恢复后能否正常运行。怎么理解呢？很简单，以跑马拉松为例，为了预防出现跑不动的情况，预先准备了一瓶红牛（应该给我广告费），当选手累得躺下后，拿出这瓶红牛一口气喝了，然后你有力量了，恢复了原来的状态，站起来继续跑。这下理解了吧。不过失效恢复测试一般是对具有负载均衡的系统进行的，主要是为了测试当系统局部发生故障时，是否会对全局产生大的影响，产生的影响是否在可以接受的范围内，以及用户能否继续使用系统。在实际应用过程中，可以模拟一台或几台负载均衡机器出现故障来进行失效恢复测试，但需要注意的是，不仅要关心失效后，用户是否可以正常访问或者恢复后系统是否可以正常工作，也要关注失效后，系统还能支持多少并发用户，以及采用哪些备选方案来快速响应。10.配置测试通过对被测系统软硬环境的调整，了解各种不同环境对系统性能的影响程度，从而找到系统各项资源的最优分配原则。（该方法在每次执行测试时更换，扩充硬件设备，调整网络环境，从而确定各个因素对系统性能的影响，找出影响最大的因素）11.综合场景测试通过对系统体系机构和功能模块的分析以及对系统用户的分布和使用频率的分析，来构造系统综合场景的测试模型，模拟不同用户执行不同操作。如10%的用户执行登录操作，50%的用户执行查询操作，40%的用户执行数据库更新操作，最大限度地模拟系统的真实场景，使用户预知系统投入使用后的性能水平。"}, "md/performance/软件性能的基本指标.html": {"url": "md/performance/软件性能的基本指标.html", "title": "软件性能的基本指标", "keywords": "", "body": "软件性能的基本指标性能测试指标细分为业务指标、资源指标、应用指标、前端指标。业务指标并发用户数、TPS（系统每秒处理事务数）、成功率、响应时间资源指标CPU资源利用率、内存利用率、I/O应用指标空闲线程数、数据库连接数、GC/FULLGC次数、函数耗时等。前端指标页面加载时间，网络时间（DNS，连接时间、传输时间等）。性能测试指标总的可以划分为业务指标和系统资源指标两大部分。对于一般用户而言，对于系统性能的要求主要是业务指标，而系统资源指标是系统性能的一个反应，它可以帮助分析系统性能瓶颈、优化系统或者发现一些隐性问题。对于业务指标的要求主要是请求响应时间、最大并发量等。对于系统资源的指标，例如，资源使用率，是指在系统负载运行期间，数据库服务器、应用服务器、Web服务器的CPU、内存、硬盘、外置存储、网络带宽的使用率。低于20%的使用率为资源空闲，20%~60%的使用率为资源使用稳定，60%~80%的使用率表示资源使用饱和，超过80%的资源使用率必须尽快进行资源调整和优化。1.业务指标业务指标是对软件系统业务处理能力及响应速度的衡量值，是软件系统性能表现的最直观体现。下面来了解一些性能测试中常见的业务指标。1.1.响应时间ResponseTime要理解响应时间，首先需引入事务的概念。事务是指用户在客户端做一种或多种业务所需要的操作集。响应时间就是对事务操作时间的测量。事务响应时间TransactionResponseTime从客户端发起一个请求开始，到客户端接收到从服务器端返回的响应结束，整个过程所耗费的时间。此响应时间不包含客户端GUI时间（例如浏览器解释页面所消耗的时间）。对于软件系统来说，通过事务得到的系统响应时间也是由很多部分组成的。一般来说，响应时间由网络时间、服务器处理时间、网络延迟三大部分组成。首先来看从客户端发出请求到服务器返回需要经历哪些过程。网络时间客户端发出请求首先通过网络来到WebServer上（消耗时间为N1）WebServer将处理后的请求发送给AppServer（消耗时间为N2）AppServer将操作数据指令发送给Database（消耗时间为N3）Database将查询结果数据发送回AppServer（消耗时间为N4）AppServer将处理后的页面发送给WebServer（消耗时间为N5）最后WebServer将HTML转发到客户端（消耗时间为N6）这里的Nx都是网络传输上的时间开销，没有计算业务处理所需要花费的时间。服务器处理时间另外还要考虑各个服务器处理所需要的时间WT、AT、DT。网络延迟除了上面两种时间开销，还要考虑网络延迟的问题。所以最终的响应时间组成为：响应时间=网络延迟时间+WT+AT+DT+N1+N2+N3+N4+N5+N6+WT+AT+DT参考标准不同行业不同业务可接受的响应时间是不同的，一般情况，对于在线实时交易：互联网企业：500毫秒以下，例如淘宝业务10毫秒左右。金融企业：1秒以下为佳，部分复杂业务3秒以下。保险企业：3秒以下为佳。制造业：5秒以下为佳。1.2.系统处理能力系统处理能力是指系统在利用系统硬件平台和软件平台进行信息处理的能力。系统处理能力通过系统每秒钟能够处理的交易数量来评价，交易有两种理解：一是业务人员角度的一笔业务过程；二是系统角度的一次交易申请和响应过程。前者称为业务交易过程，后者称为事务。两种交易指标都可以评价应用系统的处理能力。一般的建议与系统交易日志保持一致，以便于统计业务量或者交易量。系统处理能力指标是技术测试活动中重要指标。一般情况下，用以下几个指标来度量：HPS（HitsPerSecond）：点击率。每秒点击次数，单位是次/秒HPS主要指每秒客户端向Web服务器提交的HTTP请求数。客户端每发送一个请求，服务器就处理一次，所以点击数是Web应用处理交易的最小单位。HPS越大，对服务器的压力相对也越大。这里需要区别的是，点击不是指日常使用鼠标的单击操作，因为在一次单击操作中，客户端可能向服务器发起了多个HTTP请求。HPS除受程序处理速度的影响，还受带宽的限制，即每个请求的大小情况。请求越小，每秒完成的请求数越多。在排除带宽影响的情况下，具有缓存机制的系统比没有缓存机制的系统HPS要高很多。在网络传输到达一定程度后，HPS就不会随并发量的增长而增大。一般可以在限定的带宽情况下对最大HPS进行估算，公式如下：最大HPS=带宽/8/估算平均每个请求大小带宽好比公路的宽度，网速好比车流的速度。带宽基本单位比特，简写为小写字母b，更大的单位是：Kb、Mb、Gb等；网速基本单位字节，简写为大写字母B，更大的单位有：KB、MB、GB等。100Mb/8/5KB=12.5MB/5KB=12.5*1024/5=2560一般来说，日访问量是在HPS基础上计算出来的，公式如下：日访问量=HPS*3600*日访问小时数（可按8小时算）QPS（QueriesperSecond）：系统每秒处理查询次数，单位是次/秒每秒查询率，是一台服务器每秒能够响应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。它代表的是服务器的机器的性能最大吞吐能力。TPS（TransactionperSecond）：系统每秒处理交易数，单位是笔/秒TPS=脚本运行期间所有事务总数/脚本运行时长TPS反映了系统在同一时间内能够处理业务的最大能力。TPS会受到负载的影响，也会随着负载的增加而逐渐增加。当系统进入繁忙期后，TPS会有所下降，而在几分钟后开始出现少量的失败事务。对于互联网业务中，如果某些业务有且仅有一个请求连接，那么TPS=QPS=HPS，一般情况下用TPS来衡量整个业务流程，用QPS来衡量接口查询次数，用HPS来表示对服务器点击请求。参考标准无论TPS、QPS、HPS,此指标是衡量系统处理能力非常重要的指标，越大越好。对于已上线系统：可选取高峰时刻，在一定时间内（如3-10分钟），获取系统总业务量，计算单位时间（秒）内完成的笔数，乘以2-5倍作为峰值的TPS，例如峰值3分钟内处理订单18万笔，平均TPS是1000，峰值TPS可以是2000-5000。对于新系统：没有历史数据作参考，建议通过业务部门进行评估。根据经验，一般情况下：金融行业：1KTPS~5WTPS，不包括互联网化的活动保险行业：100TPS~10WTPS，不包括互联网化的活动制造行业：10TPS~5KTPS互联网电子商务：1WTPS~100WTPS互联网中型网站：1KTPS~5WTPS互联网小型网站：500TPS~1WTPSTPS可以参照同行业系统和结合具体业务，中小企业TPS值为50~1K笔/秒，银行TPS值为1K~5W笔/秒，淘宝TPS值为3W~30W笔/秒。1.3.吞吐量Throughput吞吐量为单位时间内系统处理的客户请求的数量，直接体现软件系统的性能承载能力。对于交互式应用系统来说，吞吐量反映的是服务器承受的压力；在容量规划的测试中，吞吐量是一个重要指标，它不但反映在中间件、数据库上，更加体现在硬件上。从业务角度看，吞吐量可用请求数/秒、页面数/秒、人数/天或处理业务数/小时等单位来衡量；从网络角度看，吞吐量可以用字节/秒来衡量。对于交互式应用来说，吞吐量反映的是服务器承受的压力，它能够说明系统的负载能力。以不同方式表达的吞吐量可以说明不同层次的问题。例如：以字节/秒的方式，可以表示要受网络基础设施、服务器架构、应用服务器制约等方面的瓶颈；以请求数/秒的方式，表示主要是受应用服务器和应用代码的制约体现出的瓶颈。经常在网上看到吞吐量与吞吐率的概念，也有不少人把两者混淆。吞吐量是指单位时间内系统处理的请求数量，能直接反映服务器承受的压力，是需要重点关注的指标。吞吐率一般指用户在给定的一秒内从服务器获得的数据量，简而言之就是服务器返回的数据量。1.4.并发用户数VirtualUser系统用户数：简单地说就是该系统的注册用户数在线用户数：即登录系统的用户并发用户数：是对服务器产生压力的用户例如一个邮件系统，有100个注册用户，那么系统用户数就是100个；其中一段时间内有80个用户登录使用，在这段时间内在线用户数就是80。但其中有10个用户在阅读邮件内容，20个用户在写邮件，这30个用户在此阶段对服务器并没有产生压力。只有产生了请求、提交等业务操作的用户才会对服务器构成压力。所以并发用户数是指在系统运行期间同一时刻进行业务操作的用户数量。一般应用系统并发用户数为在线用户数的10%~20%，但还是要取决于具体的业务逻辑、业务场景。1.5.最大并发用户数最大并发用户数是指应用系统在正式环境下所能承受的最大并发用户数量。在运行中，如果出现了频繁业务操作失败、响应时间远远超出用户所能承受的最大值或出现了服务器宕机等情况，则说明系统承载量已经超出了最大并发用户数的范围。先了解一个而简单的例子TPS是每秒事务数，但是事务是要靠虚拟用户做出来的，假如1个虚拟用户在1秒内完成1笔事务，那么TPS明显就是1；如果某笔业务响应时间是1ms,那么1个用户在1秒内能完成1000笔事务，TPS就是1000了；如果某笔业务响应时间是1s,那么1个用户在1秒内只能完成1笔事务，要想达到1000TPS，至少需要1000个用户；因此可以说1个用户可以产生1000TPS，1000个用户也可以产生1000TPS，无非是看响应时间快慢。系统的性能由TPS决定，跟并发用户数没有多大关系。系统的最大TPS是一定的（在一个范围内），但并发用户数不一定，可以调整。对于已有系统可选取高峰时刻，在一定时间内使用系统的人数，这些人数可认为是在线用户数，并发用户数可以取10%。例如在半个小时内，使用系统的用户数为10万，那么取10%（即1万）作为并发用户数基本就够了。新系统没有历史数据作参考，建议通过业务部门进行评估。一般情况下，大型系统（业务量大、机器多）做压力测试，1W~5W个用户并发，中小型系统做压力测试，5K个用户并发比较常见。1.6.PVPV即pageview，页面浏览量。用户每一次对网站中的每个页面访问均被记录1次。用户对同一页面的多次刷新，访问量累计。通常是衡量一个网站甚至一条网络新闻的主要指标。与PV相关的还有RV，即重复访问者数量（repeatvisitors）。1.7.UVUV访问数（UniqueVisitor）指独立访客访问数，统计1天内访问某站点的用户数（以cookie为依据），一台电脑终端为一个访客。可以理解成访问某网站的电脑的数量。网站判断来访电脑的身份是通过来访电脑的cookies实现的。如果更换了IP后但不清除cookies，再访问相同网站，该网站的统计中UV数是不变的。如果用户不保存cookies访问、清除了cookies或者更换设备访问，计数会加1。一天内相同的客户端多次访问只计为1个访客。2.资源指标资源指标与硬件资源消耗直接相关，也就是所谓的资源利用率。测试的目的不同，需要统计的系统资源指标也不同，主要包括服务器操作系统资源使用情况、资源消耗情况等。2.1.处理器CPU占用率：CPUUtilizationLinuxCPU利用率:Processor/ProcessorTime如果该值持续超过95%，则表明瓶颈是CPU。可以考虑增加一个处理器或更换一个更快的处理器。一般可接受的最大上限是80%~85%，合理使用的范围在60%~70%以下。处理器队列长度：System/ProcessorQueueLength如果System/ProcessorQueueLength大于2，而处理器利用率（ProcessorTime）一直很低，则存在着处理器阻塞。CPU资源成为系统性能瓶颈的征兆：很慢的响应时间（slowresponsetime）。CPU空闲时间为零（zeroPercentidleCPU）。过高的用户占用CPU时间（highPercentuserCPU）。过高的系统占用CPU时间（highPercentsystemCPU）。长时间的有很长的运行进程队列（largerunqueuesizesustainedovertime）。2.2.内存RAMMemory内存页交换速率：PagingRateLinux如果该值偶尔走高，则表明当时有线程竞争内存。如果该值持续很高，则内存可能是瓶颈，也可能是内存访问命中率低。可用字节数：Memory/AvailableBytesMemory/AvailableBytes计数器的值持续降低，同时Process/PrivateBytes计数器和Process/WorkingSet计数器的值在长时间内持续升高，则很可能存在内存泄漏。需要更详细的内存监控工具来定位是否有内存泄漏和存在内存泄漏的代码。内存资源成为系统性能瓶颈的征兆：很高的换页率（highpageoutrate）。进程进入不活动状态。交换区所有磁盘的活动次数很高。很高的全局系统CPU利用率。内存不够出错（outofmemory）。2.3.磁盘I/ODiskRate：磁盘交换率Linux如果该参数值一直很高，则表明I/O有问题。可考虑更换更快的硬盘系统。LogicalDisk/DiskTime和LogicalDisk/Avg.DiskQueueLength当这两个值很高，而PageReads/sec（页面读取操作速率）很低时，则可能存在磁盘瓶颈。I/O资源成为系统性能瓶颈的征兆：过高的磁盘利用率（highdiskutilization）。太长的磁盘等待队列（largediskqueuelength）。等待磁盘I/O的时间所占的百分率太高（largePercentageoftimewaitingfordiskI/O）。太长的运行进程队列，但CPU却空闲（largerunqueuewithidleCPU）。太高的物理I/O速率[largephysicalI/Orate（notsufficientinitself）]。过低的缓存命中率[lowbuffercachehitratio（notsufficientinitself）]。2.4.带宽一般使用计数器BytesTotal/sec来度量。BytesTotal/sec表示为发送和接收字节的速率，包括帧字符在内。判断网络连接速度是否是瓶颈，可以用该计数器的值和目前网络的带宽进行比较。判断网络带宽是否是系统运行性能瓶颈的首要条件是，网络带宽是否会影响系统交易执行性能。例如，减小网络带宽，并发用户数、响应时间与事务通过率等性能指标是否不能接受；增加网络带宽，并发用户数、响应时间与事务通过率等性能指标会得到明显提高。在实际性能测试中，如果发现始终报连接超时，而实际手工访问可以正常访问，可以通过ping应用服务器IP或网关IP，如果出现网络严重延迟或丢包，则说明网络不稳定，需要检查网络。"}, "md/performance/软件性能测试方法论.html": {"url": "md/performance/软件性能测试方法论.html", "title": "软件性能测试方法论", "keywords": "", "body": "软件性能测试方法论性能测试方法主要包括SEI负载测试计划过程和RBI方法。1.SEI负载测试计划过程SEI负载测试计划过程（SEILoadTestingPlanningProcess）是一个关注于负载测试计划的方法，其目标是产生清晰、易理解、可验证的负载测试计划。SEI负载测试计划过程包括6个关注的区域（Area）：目标、用户、用例、生产环境、测试环境和测试场景。SEI负载测试计划过程将以这6个区域作为负载测试计划需要重点关注和考虑的内容，其重点关注以下几个方面的内容。生产环境与测试环境的不同由于负载测试环境与实际的生产环境存在一定的差异，因此，在测试环境上对应用系统进行的负载测试结果很可能不能准确地反映该应用系统在生产环境上的实际性能表现，为了规避这个风险，必须仔细设计测试环境。用户分析用户是对被测应用系统性能表现最关注和受影响最大的对象，因此，必须通过对用户行为进行分析，依据用户行为模型建立用例和场景。用例用例是用户使用某种顺序和操作方式对业务过程进行实现的过程。对负载测试来说，用例的作用主要在于分析和分解出关键的业务，判断每个业务发生的频度、业务出现性能问题的风险等。从SEI负载测试计划过程的描述中可以看到，SEI负载测试计划过程给出了负载测试需要关注的重点区域，但严格来说，其并不能被称为具体的方法论，因为其仅仅给出了对测试计划过程的一些关注内容，而没有能够形成实际的可操作的过程。同功能测试一样，性能测试也必须经历测试需求、测试设计、测试执行、测试分析等阶段，但由于性能测试自身的特殊性（例如，需要引入工具，分析阶段相对重要），性能测试过程又不能完全套用功能测试过程。SEI负载测试计划过程在负载测试需要关注的具体内容上提供了参考，但其并不是一个完整的测试过程。2.RBI方法RBI（RapidBottleneckIdentify）方法是一种用于快速识别系统性能瓶颈的方法。该方法基于以下一些事实：发现的80%系统的性能瓶颈都由吞吐量制约。并发用户数和吞吐量瓶颈之间存在一定的关联。采用吞吐量测试可以更快速地定位问题。RBI方法首先访问服务器上的小页面和简单应用，从应用服务器、网络等基础的层次上了解系统吞吐量表现；其次选择不同的场景，设定不同的并发用户数，使其吞吐量保持基本一致的增长趋势，通过不断增加并发用户数和吞吐量，观察系统的性能表现。在确定具体的性能瓶颈时，RBI将性能瓶颈的定位按照一种自上而下的分析方式进行分析，首先确定是由并发还是由吞吐量引发的性能表现限制，然后从网络、数据库、应用服务器和代码本身4个环节确定系统性能具体的瓶颈。RBI方法在性能瓶颈的定位过程中能发挥良好的作用，其对性能分析和瓶颈定位的方法值得借鉴，但其也不是完整的性能测试过程。3.性能测试基本过程面试性能测试时，经常会问一个问题：能否简单地介绍一下性能测试的过程？多数人的回答都不咋地，原因是很多人不清楚性能测试以至于回答问题的思路混乱。其实，大家在应聘性能测试职位时，必须要清楚这个职位是具体做哪些工作的，并且按照工作的流程把每一个环节都表述清楚。下面结合过往公司实际工作流程与阿里云性能测试流程给大家介绍一下，性能测试的过程到底是如何进行的。本体系将性能测试工作共分为：需求阶段、准备阶段、执行阶段、报告阶段、总结阶段5部分。力求简单、实用、有效的指导当前的性能测试工作活动。需求阶段准备阶段执行阶段报告阶段总结阶段根据内部或外部客户的需求，项目经理需进行可行性分析、进行项目组筹建执行具体的性能测试计数方案，并评审通过按照测试计划中的测试内容规定项目执行各项测试编制《性能测试分析报告》汇报测试结果以及对系统性能的评估编制《性能测试总结报告》，总结性能测试过程、方法、经验、教训等，改进工作流程的建议等项目经理针对客户的系统，需召集相关的人员开项目启动会环境搭建准备，由客户方实施，并通过冒烟测试详细记录测试工作步骤以及测试结果项目经理组织人员进行详细的需求调研与分析，确定具体的需求范围测试人员进行脚本设计、数据准备，监控部署等根据测试结果和性能跟踪数据、监控数据进行系统瓶颈分析制定详细的测试和优化分析计划并通过广泛的评审编写日报或者周报并汇报上级管理层，接收上级管理层的监管与指导总结整个性能测试流程体系，共包括5大阶段、7项主要活动。5大阶段：需求阶段、准备阶段、执行阶段、报告阶段、总结阶段7项主要活动：项目启动、需求调研与分析、项目计划制定、性能测试准备、性能测试执行、性能测试报告、项目总结4.测试体系活动描述4.1.需求阶段4.1.1.活动1—项目启动附件下载：附件5-1-1-1：《性能测试需求》附件5-1-1-2：《项目启动会议记录》附件5-1-1-3：《性能测试需求分析报告》4.1.2.活动2－需求调研与分析附件下载：附件5-1-2-1：《性能测试需求调研大纲》附件5-1-2-2：《性能测试需求分析报告》4.1.3.活动3－项目计划制定附件下载：附件5-1-3-1：《性能测试项目工作计划》4.2.准备阶段4.2.1.活动4—性能测试准备附件下载：附件5-2-1-1：《性能测试技术方案》附件5-2-1-2：《性能测试方案样例》4.3.执行阶段4.3.1.活动5—性能测试执行附件下载：附件5-3-1-1：《性能测试执行日志记录》附件5-3-1-2：《性能测试结果与缺陷跟踪》4.4.报告阶段4.4.1.活动6—性能测试报告附件下载：附件5-4-1-1：《性能测试报告》附件5-4-1-2：《性能测试报告样例》4.5.总结阶段4.5.1.活动7—项目总结附件下载：附件5-5-1-1：《XX项目总结》5.性能测试需求分析性能测试的目的就是把客户的真正需求搞清楚，这是性能测试最关键的过程。有很多客户对性能测试是不了解的，客户可能会提出的我们需要对所有的功能都进行性能测试、系统用户登录响应时间小于3秒、系统支持10万用户并发访问等要求。那么这些需求是否存在什么问题呢？我们来分析下：我们需要对所有的功能都进行性能测试每位用户都希望自己公司应用的系统有良好的性能，从客户的角度讲，肯定都是希望所有的系统应用都有好的系统性能表现，那么是不是所有的功能都要经过性能测试呢？答案当然是否定的，通常性能测试周期较长。首先，全部功能模块都进行性能测试需要有非常长的时间；其次，根据80-20原则，通常系统用户经常使用的功能模块大概占用系统整个功能模块数目的20%，像参数设置等类似的功能模块，通常仅需要在应用系统时管理员进行一次性设置，针对这类设置进行性能测试也是没有任何意义的。通常，性能测试是由客户提出需求内容，性能测试人员针对客户的需求进行系统和专业的分析后，提出相应的性能测试计划、解决方案、性能测试用例等与用户共同分析确定最终的性能测试计划、解决方案、性能测试用例等，性能测试的最终测试内容通常也是结合客户真实的应用场景，客户应用最多，使用最频繁的功能。所以说，对所有的功能都进行性能测试是不切实际也是不科学的做法，作为性能测试人员必须清楚。系统用户登录响应时间小于3秒钟从表面看这句话似乎没有什么问题，仔细看看是不是看出点什么门道呢？其实这句话更像一个功能测试的需求，因为其没有指明是在多少用户访问时，系统的相应时间小于3秒，作为性能测试人员必须清楚客户的真实需求，消除不明确的因素。系统支持10万用户并发访问从表面看这句话似乎也没有什么问题。在进行性能测试时，系统的可扩展性是需要我们考虑的一个重要内容。例如，一个门户网站，由于刚开始投入到市场上，访问用户量目前只有几百个用户，随着广告、推荐等措施推动了系统宣传力度，那么我们在做系统性能测试时候，需要对未来两三年内系统应用用户有一个初步预期，以至于在两三年后系统仍然能够提供给用户以好的性能体验。但是，倘若用户应用该系统的时候，日常每天只有几十个用户，在未来的5～10年内，也不过几百个用户，这是不是需要进行10万级用户并发访问的性能测试呢？建议是把这种情况向客户表达清楚，在满足当前和未来用户应用系统性能要求的前提下进行测试，能够节省客户的投入，这样客户会觉得你更加专业，也真正从客户的角度出发，相信一定会取得更好的效果。如果系统用户量很大，考虑到可扩展性需求，确实需要进行10万级用户这种情况的性能测试。我们也需要搞清楚10万级用户的典型应用场景，以及不同操作的人员比例，这样的性能测试才会更有意义。性能测试成功的关键不在于性能测试工具，而在于有效的性能测试分析方法和实践。只有切实掌握了性能测试需求分析方法，才能保证一个应用性能测试的成功、有效。80/20原则所谓80/20原则，即每个工作日中80%的业务在20%的时间内完成。举例：每年业务量集中在8个月，每个月20个工作日，每个工作日8小时，即每天80%的业务在1.6小时完成。去年全年处理业务约100万笔，其中15%的业务处理中每笔业务需对应用服务器提交7次请求，70%的业务处理中每笔业务需对应用服务器提交5次请求，其余15%的业务处理中每笔业务需对应用服务器提交3次请求。根据以往的统计结果，每年的业务增量为15%。考虑到今后3年业务发展的需要，测试需按现有业务量的2倍进行。每年总的请求数=(100×15%×7+100×70%×5+100×15%×3)×2=1000（万次/年）每天请求数=1000/(20×8)=6.25（万次/天）每秒请求数=(62500×80%)/(8×20%×3600)=8.68（次/秒）即服务器处理请求的能力应达到9次/秒。"}, "md/performance/软件性能测试的目标.html": {"url": "md/performance/软件性能测试的目标.html", "title": "软件性能测试的目标", "keywords": "", "body": "软件性能测试的目标软件性能测试的目标是验证软件系统是否能够达到用户提出的性能指标，同时发现软件系统中存在的性能瓶颈，优化软件，最终起到优化系统的目的。软件性能测试包括以下几个方面的内容。评估系统的能力测试中得到的负荷和响应时间数据可以被用于验证所计划的模型的能力，并帮助作出决策。识别体系中的弱点受控的负荷可以被增加到一个极端的水平，并突破它，从而修复体系的瓶颈或薄弱的地方。系统调优重复运行测试，验证调整系统的活动得到了预期的结果，从而改进性能。检测软件中的问题长时间的测试执行可能导致程序发生由于内存泄漏引起的失败，揭示程序中隐含的问题或冲突。验证稳定性（Resilience）、可靠性（Reliability）在一个生产负荷下执行测试一定的时间是评估系统稳定性和可靠性是否满足要求的唯一方法。1.性能测试通过标准性能测试从需求、设计、准备、执行到分析，最后需要判断性能测试是否通过，性能测试工程师最终需要考虑很多因素，判断的标准相应也会有多个维度。性能测试通过标准包括服务端性能、前端性能和用户体验性能，常规通过标准如表所示。"}, "md/performance/性能测试工具.html": {"url": "md/performance/性能测试工具.html", "title": "性能测试工具", "keywords": "", "body": "性能测试工具日行千里需有千里马，要想做好性能测试也需要一款好的工具来支持。软件性能测试工具分为三类：商业收费工具、开源免费工具、自主开发工具。工欲善其事必先利其器，性能测试时模拟大量负载需要工具帮忙，市面上可供使用的负载工具繁多，如何选择呢？首先我们要明白负载工具是帮助我们来模拟负载的，对于性能测试来说，工具并不是核心，分析、评估、找出性能问题才是核心，这些是主观因素；工具是客户因素，自然要降低其对结果的影响，所以工具选择时我们有几个方面要考虑。专业、稳定、高效，比如LoadRunner,工业级性能负载工具。简单易上手，在测试脚本上不用花太多时间。有技术支持，文档完善，不用在疑难问题上花费时间，集中精力在性能分析上。要考虑投入产出比，比如我们可以选择免费开源的JMeter。当然有时候自研或者使用开源不一定比商业工具更省钱，因为要做技术上的投资，时间上的投资。常见性能工具：HP公司的LoadRunner;ApacheJMeter（开源）Grinder（开源）CompuWare公司的QALoadMicrosoft公司的WASRadView公司的WebLoadIBM公司的RPT总之我们要认清性能测试的核心是性能分析，重要的是思想，实现方式，不在意工具；大家本着简单、稳定、专业、高效、省钱的原则来选择工具。1.LoadRunnerVSJMeter比较参数LoadRunnerJMeter协议LoadRunner支持所有协议主要用于Web和Web服务应用程序相关协议可用性LoadRunner是一种昂贵的软件测试工具。它最近发布了免费试用版，但不能简单地下载使用。ApacheJMeter是一个开源的免费软件测试工具，可以轻松下载该工具以执行任何测试。负荷产生能力LoadRunner的负载生成能力有限。JMeter具有无限的负载生成能力。执行与JMeter相比，执行非常复杂。它为每个用户创建一个线程。在JMeter中执行起来更容易。只需要安装Java，下载JMeter并上传JMeter脚本文件。报告分析由HPAnalysis解析以生成各种专业图形报告。对于经验不足的工程师来说，结果很容易理解，报告需要更专业的测试人员进行深入分析输出。脚本编写LoadRunner需要脚本知识。可以运行完整的负载测试，而无需了解JMeter中的一些代码。建立测试场景LoadRunner更复杂，因为它需要管理不同的代理。JMeter不需要添加开始或结束事务元素。开源和社区支持由一家大型公司所有，限制了用户数量。拥有活跃的社区，并为遇到问题的用户提供支持。"}, "md/LR/index.html": {"url": "md/LR/index.html", "title": "LoadRunner", "keywords": "", "body": "LoadRunnerLoadRunner引入国内以来迅速为测试工程师接受，成为性能测试的主流工具，下面我们将对LoadRunner工具的使用展开详细讲解。"}, "md/LR/简介.html": {"url": "md/LR/简介.html", "title": "LoadRunner 简介", "keywords": "", "body": "LoadRunner1.基本组成LoadRunner主要由VirtualUserGenerator、Controller、LoadGenerator和Analysis四部分构成。VirtualUserGenerator：VUGen：虚拟用户脚本生成器录制最终用户业务流程并创建自动化性能测试脚本，即Vuser脚本。录制期间，VuGen将监控数据库的客户端，并跟踪用户发送到服务器以及从服务器接收的所有请求，VuGen将自动生成精确建模并模拟实际情况的函数，而无需手动编写应用程序对服务器的API函数调用。回放期间，Vuser脚本通过执行对服务器API的调用，直接与服务器通信。当Vuser直接与服务器通信时，客户端接口不需要系统资源。这样，可以在一个工作站上同时运行大量Vuser，进而可以仅使用几台测试计算机来模拟较重的服务器负载。此外，由于Vuser脚本不依赖于客户端软件，因此即使客户端软件的用户界面尚未完全开发好也可以使用Vuser检查服务器性能。使用VuGen，可以将脚本作为独立测试运行。通过从VuGen运行脚本可以了解Vuser的行为方式以及需要进行哪些改进，因此对于调试很有帮助。VuGen只能在Windows平台上录制Vuser脚本。但录制的Vuser脚本可在Windows和UNIX平台上运行。Controller：控制器组织、驱动、管理并监控负载测试。LoadGenerator：负载生成器执行场景时，LoadRunnerController将该场景中的每个Vuser分散到负载生成器。负载生成器是执行Vuser脚本，从而使Vuser可以模拟实际用户操作的计算机。Analysis：性能分析器用于查看、剖析和比较性能结果。2.LoadRunner术语场景（Scenario）使用LoadRunner可以将应用程序性能测试需求划分为多个场景。场景定义了每个测试会话中发生的事件。举例来说，场景定义并控制要模拟的用户的数量及其执行的操作，以及他们运行模拟操作所用的计算机。Vuser在场景中，LoadRunner用虚拟用户或Vuser代替实际用户。运行场景时，Vuser模拟实际用户的操作来使用应用程序。一台工作站只能容纳一个实际用户，而多个Vuser可以同时运行在同一台工作站上。实际上，一个场景可以包含几十、几百甚至几千个Vuser。Vuser脚本Vuser在场景中执行的操作是用Vuser脚本描述的。运行场景时，每个Vuser都执行Vuser脚本。Vuser脚本中包含度量并记录应用程序组件的性能的函数。事务要度量服务器的性能，需要定义事务。事务代表度量过程中我们感兴趣的一个或一系列操作。在Vuser脚本中，可以通过嵌入适当的start和end事务语句的脚本段来定义事务。例如，可以定义某个事务，用于测量服务器处理查看帐户收支情况的请求的时间，以及在ATM上显示收支信息的时间。集合点可以在Vuser脚本中插入集合点来模拟服务器上较重的用户负载。集合点指示Vuser在测试执行期间等待，直到多个Vuser在某一点到达，以使他们可以并行执行某个任务。例如，要模拟银行服务器的峰值负载，可以插入一个集合点来指示100个Vuser同时往他们的帐户存入现金。3.LoadRunnerVuser技术在每个Windows负载生成器上，需要安装远程代理调度程序（进程）和LoadRunner代理。远程代理调度程序（进程）远程代理调度程序（进程）可使Controller在负载生成器计算机上启动应用程序。代理LoadRunner代理可使Controller和负载生成器互相通信。运行场景时，Controller指示远程代理调度程序（进程）启动LoadRunner代理。该代理根据从Controller接收到的指令来初始化、运行、暂停和停止各个Vuser。同时，该代理还将各个Vuser的状态数据传回Controller。4.LoadRunner测试过程负载测试一般包括5个阶段：规划测试、创建Vuser脚本、创建场景、运行场景、监视场景和分析测试结果。规划测试要成功地进行负载测试，需要制定完整的测试计划。定义明确的测试计划将确保制定的LoadRunner场景能完成负载测试目标。创建Vuser脚本Vuser模拟实际用户与基于Web的应用程序的交互。Vuser脚本包含场景执行过程中每个虚拟用户执行的操作。VUGen录制最终用户活动生成自动化测试脚本。创建场景场景描述测试会话期间发生的事件。场景中包括运行Vuser的计算机的列表、运行Vuser脚本的列表以及在场景执行期间运行的指定数量的Vuser或Vuser组。可以使用LoadRunnerController创建场景。创建手动场景可以通过定义Vuser组（将为这些组分配一些单独的Vuser）、Vuser脚本和运行这些脚本的负载生成器来创建场景。也可以使用百分比模式来创建场景，在这种模式下可以定义场景中要使用的Vuser的总数、负载生成器计算机以及要分配给每个Vuser脚本的Vuser占Vuser总数的百分比。创建面向目标的场景对于Web测试，可以创建面向目标的场景，在其中定义希望达到的测试目标。LoadRunner将基于这些目标自动创建场景。运行场景使用LoadRunnerController驱动、管理并监控负载测试可以指示多个Vuser同时执行任务，以模拟服务器上的用户负载。可以通过增加或减少同时执行任务的Vuser的数量来设置负载级别。监视场景可以使用LoadRunner联机运行时、事务、系统资源、Web资源、Web服务器资源、Web应用程序服务器资源、数据库服务器资源、网络延时、流媒体资源、防火墙服务器资源、ERP/CRM服务器资源、Java性能、应用程序部署和中间件性能监视器来监视场景的执行。分析测试结果在场景执行期间，LoadRunner将记录不同负载下的应用程序性能。可以使用LoadRunnerAnalysis的图和报告来分析应用程序的性能。"}, "md/LR/hwt.html": {"url": "md/LR/hwt.html", "title": "HP Web Tours", "keywords": "", "body": "HPWebToursHPWebTours应用程序是一个基于Web的旅行社系统。HPWebTours用户可以连接到Web服务器，搜索航班，预订机票并查看航班路线。确保示例Web服务器正在运行。安装并重启LoadRunner之后，Web服务器会自动启动。如果重启系统后服务器仍未运行，请选择开始&gt;程序&gt;HPLoadRunner&gt;Samples&gt;Web&gt;启动Web服务器。打开HPWebTours应用程序。选择开始&gt;程序&gt;HPLoadRunner&gt;Samples&gt;Web&gt;HPWebTours应用程序。浏览器将打开HPWebTours的主页。登录到HPWebTours。输入以下信息：Username（用户名）：jojoPassword（密码）：bean在左窗格中单击Login（登录）。将出现HPWebTours应用程序欢迎您使用的消息。预订机票。在左窗格中单击Flights（航班）。将打开FindFlight（查找航班）页面。将ArrivalCity（到达城市）更改为LosAngeles（洛杉矶）。单击Continue（继续）。在FindFlight（查找航班）页面上，接受默认航班选择并单击Continue（继续）。在PaymentDetails（支付明细）页面上单击Continue（继续）。将显示Invoice（发票）页面，概述航班预订情况。结束HPWebTours会话。在左窗格中单击SignOff（注销）退出。"}}